apiVersion: operators.coreos.com/v1alpha1
kind: ClusterServiceVersion
metadata:
  annotations:
    alm-examples: |-
      [
        {
          "apiVersion": "zadara.com/v1alpha1",
          "kind": "AppDefinition",
          "metadata": {
            "name": "cassandra-test"
          },
          "spec": {
            "namespace": "default",
            "selector": {
              "matchLabels": {
                "app": "cassandra"
              }
            }
          }
        },
        {
          "apiVersion": "zadara.com/v1alpha1",
          "kind": "ApplicationClone",
          "metadata": {
            "name": "cassandra-2009-02-09--19-52-14-clone"
          },
          "spec": {
            "cloneConfiguration": "dr-us-west-clone"
          }
        },
        {
          "apiVersion": "zadara.com/v1alpha1",
          "kind": "ApplicationSnapshot",
          "metadata": {
            "name": "cassandra-2009-02-09--19-52-14"
          },
          "spec": {
            "apiObjects": [
              "{\"apiVersion\": \"v1\",\"items\": [{\"apiVersion\": \"v1\",\"kind\": \"ConfigMap\",\"metadata\": {...",
              "{\"apiVersion\": \"v1\",\"items\": [{\"apiVersion\": \"apps\u000b1\",\"kind\": \"Deployment\",\"metadata\": {..."
            ],
            "snapshotConfiguration": "dr-us-west-snapshot",
            "vpsas": [
              {
                "name": "example-vpsa",
                "provisioner": "csi.zadara.com",
                "snapshots": [
                  {
                    "cg": "vol-0000001"
                  }
                ]
              }
            ]
          }
        },
        {
          "apiVersion": "zadara.com/v1alpha1",
          "kind": "CloneConfiguration",
          "metadata": {
            "name": "dr-us-west-clone"
          },
          "spec": {
            "appSnapshot": {
              "name": "mysql-snap-2020-01-26"
            },
            "dryRun": false,
            "prefix": "clone-",
            "suffix": "",
            "targetNamespace": "test"
          }
        },
        {
          "apiVersion": "zadara.com/v1alpha1",
          "kind": "Invoker",
          "metadata": {
            "name": "mysql-daily-backup"
          },
          "spec": {
            "snapshotConfiguration": {
              "name": "dr-us-west-snapshot"
            }
          }
        },
        {
          "apiVersion": "zadara.com/v1alpha1",
          "kind": "SnapshotConfiguration",
          "metadata": {
            "name": "dr-us-west-snapshot"
          },
          "spec": {
            "appDefinition": "cassandra-test",
            "policies": [
              "daily-snapshot-for-month",
              "weekly-snapshot-for-year"
            ]
          }
        },
        {
          "apiVersion": "zadara.com/v1alpha1",
          "kind": "SnapshotPolicy",
          "metadata": {
            "name": "daily-snapshot-for-month"
          },
          "spec": {
            "keepLast": 7,
            "schedule": "0 0 * * *"
          }
        },
        {
          "apiVersion": "zadara.com/v1alpha1",
          "kind": "Vpsa",
          "metadata": {
            "name": "example-vpsa"
          },
          "spec": {
            "csi": {
              "iscsiMode": "rootfs",
              "livenessProbe": {
                "periodSeconds": 5
              },
              "provisioner": "csi.zadara.com"
            },
            "hostname": "example.vpsas.zadara.com",
            "https": true,
            "token": "EXAMPLETOKEN-1234"
          }
        }
      ]
    capabilities: Basic Install
  creationTimestamp: null
  name: zoperator.v0.1.0
  namespace: default
spec:
  apiservicedefinitions: {}
  customresourcedefinitions:
    owned:
    - description: AppDefinition allows to define which Kubernetes resources compose
        an Application, as a logical unit. This is done by means of namespaces and
        label-based selectors. The result of the query should include workloads (e.g
        Deployments, StatefulSets), RBAC, configuration (Secrets, ConfigMaps), storage,
        and all other resources required for the application to run.
      kind: AppDefinition
      name: appdefinitions.zadara.com
      resources:
      - kind: AppDefinition
        name: ""
        version: v1alpha1
      - kind: ApplicationClone
        name: ""
        version: v1alpha1
      - kind: ApplicationSnapshot
        name: ""
        version: v1alpha1
      - kind: CloneConfiguration
        name: ""
        version: v1alpha1
      - kind: ConfigMap
        name: ""
        version: v1
      - kind: CronJob
        name: ""
        version: v1beta1
      - kind: DaemonSet
        name: ""
        version: v1
      - kind: Deployment
        name: ""
        version: v1
      - kind: Invoker
        name: ""
        version: v1alpha1
      - kind: Namespaces
        name: ""
        version: v1
      - kind: Pod
        name: ""
        version: v1
      - kind: ReplicaSet
        name: ""
        version: v1
      - kind: Secret
        name: ""
        version: v1
      - kind: Service
        name: ""
        version: v1
      - kind: ServiceAccount
        name: ""
        version: v1
      - kind: SnapshotConfiguration
        name: ""
        version: v1alpha1
      - kind: SnapshotPolicy
        name: ""
        version: v1alpha1
      - kind: StatefulSet
        name: ""
        version: v1
      - kind: Status
        name: ""
        version: v1alpha1
      - kind: Vpsa
        name: ""
        version: v1alpha1
      specDescriptors:
      - description: Application Definition was automatically created by Zadara Operator
        displayName: Auto Discover
        path: autoDiscover
      - description: Namespace to include in ApplicationSnapshots
        displayName: Namespace
        path: namespace
      - description: Selector for API Resources (PVCs, Deployments, etc.) to include
          in as Application
        displayName: Selector
        path: selector
        x-descriptors:
        - 'urn:alm:descriptor:com.tectonic.ui:selector:'
      statusDescriptors:
      - description: API objects (Deployments, StatefulSets, ConfigMaps, etc.) matching
          namespace and selector defined in the Spec. These objects will be included
          in ApplicationSnapshot.
        displayName: APIObjects
        path: apiObjects
      - description: State of the application
        displayName: State
        path: state
      version: v1alpha1
    - description: ApplicationClone is an internal resource, created by Operator.
        It includes a list of all restored Kubernetes resources and VPSA Volumes,
        and provides information about restore status for each item. When ApplicationClone
        is created, Operator starts cloning VPSA Volumes, and restoring Kubernetes
        resources, from the ApplicationSnapshot.
      kind: ApplicationClone
      name: applicationclones.zadara.com
      resources:
      - kind: AppDefinition
        name: ""
        version: v1alpha1
      - kind: ApplicationClone
        name: ""
        version: v1alpha1
      - kind: ApplicationSnapshot
        name: ""
        version: v1alpha1
      - kind: CloneConfiguration
        name: ""
        version: v1alpha1
      - kind: ConfigMap
        name: ""
        version: v1
      - kind: CronJob
        name: ""
        version: v1beta1
      - kind: DaemonSet
        name: ""
        version: v1
      - kind: Deployment
        name: ""
        version: v1
      - kind: Invoker
        name: ""
        version: v1alpha1
      - kind: Namespaces
        name: ""
        version: v1
      - kind: Pod
        name: ""
        version: v1
      - kind: ReplicaSet
        name: ""
        version: v1
      - kind: Secret
        name: ""
        version: v1
      - kind: Service
        name: ""
        version: v1
      - kind: ServiceAccount
        name: ""
        version: v1
      - kind: SnapshotConfiguration
        name: ""
        version: v1alpha1
      - kind: SnapshotPolicy
        name: ""
        version: v1alpha1
      - kind: StatefulSet
        name: ""
        version: v1
      - kind: Status
        name: ""
        version: v1alpha1
      - kind: Vpsa
        name: ""
        version: v1alpha1
      specDescriptors:
      - description: Reference For Clone Configuration
        displayName: Clone Configuration
        path: cloneConfiguration
      statusDescriptors:
      - description: PVCs of the Application
        displayName: PVCs
        path: pvcs
      - description: PVs of the Application
        displayName: PVs
        path: pvs
      - description: Resource Kinds (Group, Version, Resource) of the Application
          (including the APIObjects)
        displayName: Resource Kinds
        path: resourceKinds
      - description: State of the ApplicationClone
        displayName: State
        path: state
      version: v1alpha1
    - description: ApplicationSnapshot is an internal resource, created by Operator.
        It includes all Application metadata (such as Deployment, StatefulSet, ConfigMap,
        PersistentVolumeClaim, and other Kubernetes resources) and Snapshots of Data,
        stored on VPSA. When ApplicationSnapshot is created, Operator creates snapshots
        of VPSA Volumes, and stores serialized Kubernetes resources in the ApplicationSnapshot.
        ApplicationSnapshot can appear only in one CloneConfiguration at the same
        time (User can't clone the same ApplicationSnapshot twice).
      kind: ApplicationSnapshot
      name: applicationsnapshots.zadara.com
      resources:
      - kind: AppDefinition
        name: ""
        version: v1alpha1
      - kind: ApplicationClone
        name: ""
        version: v1alpha1
      - kind: ApplicationSnapshot
        name: ""
        version: v1alpha1
      - kind: CloneConfiguration
        name: ""
        version: v1alpha1
      - kind: ConfigMap
        name: ""
        version: v1
      - kind: CronJob
        name: ""
        version: v1beta1
      - kind: DaemonSet
        name: ""
        version: v1
      - kind: Deployment
        name: ""
        version: v1
      - kind: Invoker
        name: ""
        version: v1alpha1
      - kind: Namespaces
        name: ""
        version: v1
      - kind: Pod
        name: ""
        version: v1
      - kind: ReplicaSet
        name: ""
        version: v1
      - kind: Secret
        name: ""
        version: v1
      - kind: Service
        name: ""
        version: v1
      - kind: ServiceAccount
        name: ""
        version: v1
      - kind: SnapshotConfiguration
        name: ""
        version: v1alpha1
      - kind: SnapshotPolicy
        name: ""
        version: v1alpha1
      - kind: StatefulSet
        name: ""
        version: v1
      - kind: Status
        name: ""
        version: v1alpha1
      - kind: Vpsa
        name: ""
        version: v1alpha1
      specDescriptors:
      - description: Included API objects by the application snapshot
        displayName: APIObjects
        path: apiObjects
      - description: Reference to a SnapshotConfiguration to snapshot
        displayName: Snapshot Configuration
        path: snapshotConfiguration
      - description: VPSAs that provides the volumes of the Application
        displayName: Vpsas
        path: vpsas
      statusDescriptors:
      - description: 'State of the application snapshot is one of the following: Pending
          - Snapshot is pending to Operator to start snapshot creation. SuspendingIO
          - Suspending IO of VPSAs volumes to be crash-consistent. Creating - Snapshot
          is being created by the VPSAs. Created - Snapshot is created and ready to
          be cloned. Failed - Snapshot creation failed, can''t cloned from this snapshot.
          Deleting - Snapshot is being deleted in the VPSAs.'
        displayName: State
        path: state
      version: v1alpha1
    - description: CloneConfiguration allows to specify which ApplicationSnapshot
        must be restored. Additionally, it allows to set destination namespace and
        renaming pattern for restored resources.
      kind: CloneConfiguration
      name: cloneconfigurations.zadara.com
      resources:
      - kind: AppDefinition
        name: ""
        version: v1alpha1
      - kind: ApplicationClone
        name: ""
        version: v1alpha1
      - kind: ApplicationSnapshot
        name: ""
        version: v1alpha1
      - kind: CloneConfiguration
        name: ""
        version: v1alpha1
      - kind: ConfigMap
        name: ""
        version: v1
      - kind: CronJob
        name: ""
        version: v1beta1
      - kind: DaemonSet
        name: ""
        version: v1
      - kind: Deployment
        name: ""
        version: v1
      - kind: Invoker
        name: ""
        version: v1alpha1
      - kind: Namespaces
        name: ""
        version: v1
      - kind: Pod
        name: ""
        version: v1
      - kind: ReplicaSet
        name: ""
        version: v1
      - kind: Secret
        name: ""
        version: v1
      - kind: Service
        name: ""
        version: v1
      - kind: ServiceAccount
        name: ""
        version: v1
      - kind: SnapshotConfiguration
        name: ""
        version: v1alpha1
      - kind: SnapshotPolicy
        name: ""
        version: v1alpha1
      - kind: StatefulSet
        name: ""
        version: v1
      - kind: Status
        name: ""
        version: v1alpha1
      - kind: Vpsa
        name: ""
        version: v1alpha1
      specDescriptors:
      - description: 'Application Clone name (default: Prefix + AppSnapshot.Name +
          Suffix)'
        displayName: App Clone
        path: appClone
      - description: Name of the Application Clone
        displayName: Name
        path: appClone.name
      - description: Application Snapshot to clone
        displayName: App Snapshot
        path: appSnapshot
      - description: Name of the Application Snapshot
        displayName: Name
        path: appSnapshot.name
      - description: 'Run clone configuration checks only (default: false)'
        displayName: Dryrun
        path: dryRun
      - description: 'Prefix to add to cloned resources (default: "clone-")'
        displayName: Prefix
        path: prefix
      - description: 'Suffix to add to cloned resources (default: "")'
        displayName: Suffix
        path: suffix
      - description: Target namespaces to clone to
        displayName: Target Namespace
        path: targetNamespace
      statusDescriptors:
      - description: Clone configuration is ready to use
        displayName: Ready
        path: ready
      version: v1alpha1
    - description: Invoker activates SnapshotConfiguration or CloneConfiguration.
        When SnapshotConfiguration is invoked, Operator will create a CronJob (for
        recurring Snapshot Policies), or a Job (for on-demand policy), which will
        create a new ApplicationSnapshot. When CloneConfiguration is invoked, Operator
        will create a new ApplicationClone object, eventually causing ApplicationSnapshot
        to be cloned. Deleting Invoker is an equivalent to stopping a SnapshotPolicy,
        or a cloning process (Application Snapshots or Clones will not be deleted).
      kind: Invoker
      name: invokers.zadara.com
      resources:
      - kind: AppDefinition
        name: ""
        version: v1alpha1
      - kind: ApplicationClone
        name: ""
        version: v1alpha1
      - kind: ApplicationSnapshot
        name: ""
        version: v1alpha1
      - kind: CloneConfiguration
        name: ""
        version: v1alpha1
      - kind: ConfigMap
        name: ""
        version: v1
      - kind: CronJob
        name: ""
        version: v1beta1
      - kind: DaemonSet
        name: ""
        version: v1
      - kind: Deployment
        name: ""
        version: v1
      - kind: Invoker
        name: ""
        version: v1alpha1
      - kind: Namespaces
        name: ""
        version: v1
      - kind: Pod
        name: ""
        version: v1
      - kind: ReplicaSet
        name: ""
        version: v1
      - kind: Secret
        name: ""
        version: v1
      - kind: Service
        name: ""
        version: v1
      - kind: ServiceAccount
        name: ""
        version: v1
      - kind: SnapshotConfiguration
        name: ""
        version: v1alpha1
      - kind: SnapshotPolicy
        name: ""
        version: v1alpha1
      - kind: StatefulSet
        name: ""
        version: v1
      - kind: Status
        name: ""
        version: v1alpha1
      - kind: Vpsa
        name: ""
        version: v1alpha1
      specDescriptors:
      - description: Reference to a CloneConfiguration to Invoke
        displayName: Clone Cfg
        path: cloneConfiguration
      - description: Reference to Clone configuration name
        displayName: Name
        path: cloneConfiguration.name
      - description: Reference to a SnapshotConfiguration to Invoke
        displayName: Snapshot Cfg
        path: snapshotConfiguration
      - description: Reference to Snapshot configuration name
        displayName: Name
        path: snapshotConfiguration.name
      statusDescriptors:
      - description: Invoker is ready to use
        displayName: Ready
        path: ready
      version: v1alpha1
    - description: SnapshotConfiguration allows to select application resources which
        must be included in ApplicationSnapshot (using namespace and labels), and
        to attach Snapshot Policies to the application (including Persistent Volumes
        on VPSA). Additionally, it provides information about all Application Snapshot
        created for this SnapshotConfiguration.
      kind: SnapshotConfiguration
      name: snapshotconfigurations.zadara.com
      resources:
      - kind: AppDefinition
        name: ""
        version: v1alpha1
      - kind: ApplicationClone
        name: ""
        version: v1alpha1
      - kind: ApplicationSnapshot
        name: ""
        version: v1alpha1
      - kind: CloneConfiguration
        name: ""
        version: v1alpha1
      - kind: ConfigMap
        name: ""
        version: v1
      - kind: CronJob
        name: ""
        version: v1beta1
      - kind: DaemonSet
        name: ""
        version: v1
      - kind: Deployment
        name: ""
        version: v1
      - kind: Invoker
        name: ""
        version: v1alpha1
      - kind: Namespaces
        name: ""
        version: v1
      - kind: Pod
        name: ""
        version: v1
      - kind: ReplicaSet
        name: ""
        version: v1
      - kind: Secret
        name: ""
        version: v1
      - kind: Service
        name: ""
        version: v1
      - kind: ServiceAccount
        name: ""
        version: v1
      - kind: SnapshotConfiguration
        name: ""
        version: v1alpha1
      - kind: SnapshotPolicy
        name: ""
        version: v1alpha1
      - kind: StatefulSet
        name: ""
        version: v1
      - kind: Status
        name: ""
        version: v1alpha1
      - kind: Vpsa
        name: ""
        version: v1alpha1
      specDescriptors:
      - description: Application Definition for the snapshot
        displayName: App Definition
        path: appDefinition
      - description: Snapshot policies, defining when ApplicationSnapshots should
          be taken
        displayName: Policies
        path: policies
      statusDescriptors:
      - description: All policies mentioned in Spec with lists of all the related
          ApplicationSnapshots
        displayName: Policies
        path: policies
      - description: Snapshot configuration is ready to use
        displayName: Ready
        path: ready
      - description: 'State of the Snapshot Configuration can be one of the following:
          Idle - No Application Snapshots using this configuration were created. Active
          - All Application Snapshots using this configuration were created successfully.
          Failed - Some Application Snapshots using this configuration are in failed
          state.'
        displayName: State
        path: state
      version: v1alpha1
    - description: SnapshotPolicy defines frequency for ApplicationSnapshots to be
        taken, and retention policy for cleaning up old ApplicationSnapshots.
      kind: SnapshotPolicy
      name: snapshotpolicies.zadara.com
      resources:
      - kind: AppDefinition
        name: ""
        version: v1alpha1
      - kind: ApplicationClone
        name: ""
        version: v1alpha1
      - kind: ApplicationSnapshot
        name: ""
        version: v1alpha1
      - kind: CloneConfiguration
        name: ""
        version: v1alpha1
      - kind: ConfigMap
        name: ""
        version: v1
      - kind: CronJob
        name: ""
        version: v1beta1
      - kind: DaemonSet
        name: ""
        version: v1
      - kind: Deployment
        name: ""
        version: v1
      - kind: Invoker
        name: ""
        version: v1alpha1
      - kind: Namespaces
        name: ""
        version: v1
      - kind: Pod
        name: ""
        version: v1
      - kind: ReplicaSet
        name: ""
        version: v1
      - kind: Secret
        name: ""
        version: v1
      - kind: Service
        name: ""
        version: v1
      - kind: ServiceAccount
        name: ""
        version: v1
      - kind: SnapshotConfiguration
        name: ""
        version: v1alpha1
      - kind: SnapshotPolicy
        name: ""
        version: v1alpha1
      - kind: StatefulSet
        name: ""
        version: v1
      - kind: Status
        name: ""
        version: v1alpha1
      - kind: Vpsa
        name: ""
        version: v1alpha1
      specDescriptors:
      - description: Amount of snapshots to keep. Oldest snapshots are deleted.
        displayName: Keep Last
        path: keepLast
      - description: Either schedule in Cron format (see https://en.wikipedia.org/wiki/Cron)
          or "on-demand"
        displayName: Schedule
        path: schedule
      statusDescriptors:
      - description: Snapshot policy is ready to use
        displayName: Ready
        path: ready
      version: v1alpha1
    - description: Vpsa allows your Kubernetes cluster to connect to VPSA. For each
        Vpsa having `spec.csi` specified, Operator will automatically deploy a CSI
        Driver, and create sample Storage Classes (Block and NAS for each Storage
        Pool on that VPSA).
      kind: Vpsa
      name: vpsas.zadara.com
      resources:
      - kind: AppDefinition
        name: ""
        version: v1alpha1
      - kind: ApplicationClone
        name: ""
        version: v1alpha1
      - kind: ApplicationSnapshot
        name: ""
        version: v1alpha1
      - kind: CloneConfiguration
        name: ""
        version: v1alpha1
      - kind: ClusterRole
        name: ""
        version: v1
      - kind: ClusterRoleBinding
        name: ""
        version: v1
      - kind: ConfigMap
        name: ""
        version: v1
      - kind: CronJob
        name: ""
        version: v1beta1
      - kind: CsiDriver
        name: ""
        version: v1beta1
      - kind: DaemonSet
        name: ""
        version: v1
      - kind: Deployment
        name: ""
        version: v1
      - kind: Invoker
        name: ""
        version: v1alpha1
      - kind: Namespaces
        name: ""
        version: v1
      - kind: Pod
        name: ""
        version: v1
      - kind: ReplicaSet
        name: ""
        version: v1
      - kind: Secret
        name: ""
        version: v1
      - kind: Service
        name: ""
        version: v1
      - kind: ServiceAccount
        name: ""
        version: v1
      - kind: SnapshotConfiguration
        name: ""
        version: v1alpha1
      - kind: SnapshotPolicy
        name: ""
        version: v1alpha1
      - kind: StatefulSet
        name: ""
        version: v1
      - kind: Status
        name: ""
        version: v1alpha1
      - kind: Vpsa
        name: ""
        version: v1alpha1
      specDescriptors:
      - description: CSI provisioner
        displayName: Csi
        path: csi
      - description: A way for the CSI plugin to reach iscsiadm on host https://github.com/zadarastorage/zadara-csi#node-iscsi-connectivity
        displayName: Iscsi Mode
        path: csi.iscsiMode
      - description: 'Liveness probe configuration for CSI driver. Default livenessProbe.handler
          is httpGet: {path:"/healthz", port:9808}. Note: livenessProbe.handler MUST
          be httpGet, with path "/healthz". Other options not allowed. livenessProbe.handler.port
          is configurable (default 9808) and MUST be unique for each CSI instance.
          More: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#configure-probes'
        displayName: Liveness Probe
        path: csi.livenessProbe
      - description: 'CSI provisioner to be used in StorageClass, for example `csi.zadara.com`.
          More: https://kubernetes.io/docs/concepts/storage/storage-classes/#provisioner'
        displayName: Provisioner
        path: csi.provisioner
      - description: Hostname of the VPSA
        displayName: Hostname
        path: hostname
      - description: 'Use https connection to the VPSA (default: http)'
        displayName: Https
        path: https
      - description: Token of the VPSA
        displayName: Token
        path: token
      statusDescriptors:
      - displayName: State
        path: state
      version: v1alpha1
  description: |2

    # Zadara Kubernetes Operator

    [Custom Resources reference](docs/custom_resources.md)

    [Configuration](docs/config_map.md)

    [Usage Examples](examples/README.md)
  displayName: zOperator
  icon:
  - base64data: 
    mediatype: png
  install:
    spec:
      clusterPermissions:
      - rules:
        - apiGroups:
          - ""
          resources:
          - pods
          - services
          - services/finalizers
          - endpoints
          - nodes
          - persistentvolumes
          - persistentvolumeclaims
          - persistentvolumeclaims/status
          - events
          - configmaps
          - secrets
          - serviceaccounts
          - namespaces
          verbs:
          - create
          - delete
          - get
          - list
          - patch
          - update
          - watch
        - apiGroups:
          - apps
          resources:
          - deployments
          - daemonsets
          - replicasets
          - statefulsets
          verbs:
          - create
          - delete
          - get
          - list
          - patch
          - update
          - watch
        - apiGroups:
          - batch
          resources:
          - jobs
          - cronjobs
          verbs:
          - create
          - delete
          - get
          - list
          - patch
          - update
          - watch
        - apiGroups:
          - monitoring.coreos.com
          resources:
          - servicemonitors
          verbs:
          - get
          - create
        - apiGroups:
          - rbac.authorization.k8s.io
          resources:
          - clusterroles
          - clusterrolebindings
          verbs:
          - create
          - delete
          - get
          - list
        - apiGroups:
          - storage.k8s.io
          resources:
          - csidrivers
          - csinodes
          - storageclasses
          - volumeattachments
          verbs:
          - create
          - delete
          - get
          - list
          - patch
          - update
          - watch
        - apiGroups:
          - apiextensions.k8s.io
          resources:
          - customresourcedefinitions
          verbs:
          - create
          - list
          - watch
          - delete
          - get
          - update
        - apiGroups:
          - snapshot.storage.k8s.io
          resources:
          - volumesnapshotclasses
          - volumesnapshotcontents
          - volumesnapshots
          - volumesnapshots/status
          verbs:
          - create
          - get
          - list
          - watch
          - update
          - delete
        - apiGroups:
          - zadara.com
          resources:
          - '*'
          - cloneconfigurations
          - applicationclones
          - snapshotpolicies
          - invokers
          - appdefinitions
          verbs:
          - create
          - delete
          - get
          - list
          - patch
          - update
          - watch
        serviceAccountName: zoperator
      deployments:
      - name: zoperator
        spec:
          replicas: 1
          selector:
            matchLabels:
              name: zoperator
          strategy: {}
          template:
            metadata:
              creationTimestamp: null
              labels:
                name: zoperator
            spec:
              containers:
              - command:
                - zoperator
                env:
                - name: WATCH_NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.annotations['olm.targetNamespaces']
                - name: POD_NAME
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.name
                - name: OPERATOR_NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.namespace
                - name: OPERATOR_NAME
                  value: zoperator
                image: zadara/zoperator:0.1.0
                name: zoperator
                resources: {}
                volumeMounts:
                - mountPath: /etc/zoperator
                  name: config-dir
              serviceAccountName: zoperator
              volumes:
              - configMap:
                  name: zoperator-config-map
                  optional: true
                name: config-dir
    strategy: deployment
  installModes:
  - supported: true
    type: OwnNamespace
  - supported: true
    type: SingleNamespace
  - supported: false
    type: MultiNamespace
  - supported: true
    type: AllNamespaces
  keywords:
  - Zadara
  - Storage
  - Volumes
  - CSI
  - VPSA
  labels:
    app: zOperator
  links:
  - name: Zadara K8S repository
    url: https://github.com/zadarastorage/zadara-k8s
  maintainers:
  - email: aviad@zadara.com
    name: Aviad Cohen
  - email: levp@zadara.com
    name: Lev Pechersky
  maturity: alpha
  provider:
    name: Zadara
    url: https://www.zadara.com/
  selector: {}
  version: 0.1.0
status: {}
